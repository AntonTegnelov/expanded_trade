# MVP Trade Effects
# Core effects for basic trade operations
# These are simplified implementations for the MVP release
# Sets up the Silk Road with initial configuration
setup_silk_road_effect = {
	# This effect should be run at the global scope
	# It will flag counties on the Silk Road and set up trade nodes
	# First, ensure the trade route exists
	if = {
		limit = {
			NOT = {
				exists = silk_road_main
			}
		}
		# Create the Silk Road trade route
		create_trade_route = {
			id = silk_road_main
			name = "silk_road_name"
			is_active = yes
			is_disrupted = no
			base_flow_capacity = 10
		}
	}
	# Set up Silk Road node counties
	# Each node county gets the appropriate flag
	# Note: Node county IDs need to be mapped to actual game counties
	every_county = {
		# Xian/Chang'an region
		if = {
			limit = {
				county_id = 256				# Placeholder for actual county ID
			}
			set_county_flag = on_silk_road
			create_trade_node = {
				id = xian_node
				name = "xian_node"
				controller = this.holder
			}
		}
		# Dunhuang region
		else_if = {
			limit = {
				county_id = 257				# Placeholder for actual county ID
			}
			set_county_flag = on_silk_road
			create_trade_node = {
				id = dunhuang_node
				name = "dunhuang_node"
				controller = this.holder
			}
		}
		# Add flags for counties on the main Silk Road route between nodes
		else_if = {
			limit = {
				OR = {
					# Counties between Xian and Dunhuang
					AND = {
						county_id = 260						# Placeholder for actual county ID
						county_id = 261						# Placeholder for actual county ID
						county_id = 262						# Placeholder for actual county ID
					}
					# Counties between Dunhuang and Kashgar
					AND = {
						county_id = 263						# Placeholder for actual county ID
						county_id = 264						# Placeholder for actual county ID
					}
					# Other counties along the route would be listed here
				}
			}
			set_county_flag = on_silk_road
		}
	}
	# Create connections between nodes
	# This defines the actual route paths
	set_trade_route_connection = {
		from = xian_node
		to = dunhuang_node
		type = land
	}
	set_trade_route_connection = {
		from = dunhuang_node
		to = kashgar_node
		type = land
	}
	# Additional connections would be defined here
	# Initialize base prosperity for major nodes
	every_county = {
		limit = {
			any_trade_node = {
				OR = {
					node_id = samarkand_node
					node_id = bukhara_node
					node_id = baghdad_node
					node_id = constantinople_node
				}
			}
		}
		add_county_modifier = {
			modifier = low_trade_prosperity
			months = 120			# Initial 10 year duration
		}
	}
}

# Calculates basic trade income for a character based on their counties with trade routes
# Scope: Character
calculate_basic_trade_income_effect = {
	# Save character scope for reference
	save_scope_as = trade_ruler
	# Initialize trade income variable
	set_variable = {
		name = trade_income
		value = 0
	}
	# Check each county owned by this character for trade activity
	every_sub_realm_county = {
		# If county is on a trade route
		if = {
			limit = {
				has_county_flag = on_silk_road
			}
			# Add base income contribution from this trade county
			scope:trade_ruler = {
				change_variable = {
					name = trade_income
					add = 0.1					# Base income per trade county
				}
			}
			# Add development-based bonus
			scope:trade_ruler = {
				change_variable = {
					name = trade_income
					add = this.development_level
					multiply = 0.01					# 1% of development level
				}
			}
			# Add modifier based on trade buildings in this county
			if = {
				limit = {
					any_county_holding = {
						exists = building:market_square_01
					}
				}
				scope:trade_ruler = {
					change_variable = {
						name = trade_income
						add = 0.05						# Bonus for market square
					}
				}
			}
			if = {
				limit = {
					any_county_holding = {
						exists = building:trading_post_01
					}
				}
				scope:trade_ruler = {
					change_variable = {
						name = trade_income
						add = 0.1						# Bonus for trading post
					}
				}
			}
		}
	}
	# Apply stewardship bonus
	change_variable = {
		name = trade_income
		multiply = stewardship
		divide = 10		# 10% per point of stewardship
	}
	# Apply final income (can be used by other effects or directly added to treasury)
	# This effect just calculates the value but doesn't apply it directly
	# Actual money transfer would be done by calling systems
}

# Applies appropriate trade prosperity modifier to a county based on its prosperity level
# Scope: County
apply_trade_prosperity_effect = {
	# Check current prosperity level (using flags or variables)
	# We're implementing a simplified version for MVP
	# Clear any existing prosperity modifiers first
	remove_modifier = low_trade_prosperity
	remove_modifier = medium_trade_prosperity
	remove_modifier = high_trade_prosperity
	# High trade prosperity (counties with trade buildings and on major routes)
	if = {
		limit = {
			OR = {
				# County has both market and trading post
				AND = {
					any_county_holding = {
						exists = building:market_square_01
					}
					any_county_holding = {
						exists = building:trading_post_01
					}
				}
				# County is a major trade center
				has_county_flag = trade_center
				# County has high development and is on trade route
				AND = {
					development_level >= 20
					has_county_flag = on_silk_road
				}
			}
		}
		add_county_modifier = {
			modifier = high_trade_prosperity
			years = 5
		}
	}
	# Medium trade prosperity
	else_if = {
		limit = {
			OR = {
				# County has at least one trade building
				any_county_holding = {
					exists = building:market_square_01
				}
				any_county_holding = {
					exists = building:trading_post_01
				}
				# County has moderate development and is on trade route
				AND = {
					development_level >= 10
					has_county_flag = on_silk_road
				}
			}
		}
		add_county_modifier = {
			modifier = medium_trade_prosperity
			years = 3
		}
	}
	# Low trade prosperity (basic counties on trade routes)
	else_if = {
		limit = {
			has_county_flag = on_silk_road
		}
		add_county_modifier = {
			modifier = low_trade_prosperity
			years = 2
		}
	}
}

# Disrupts a trade route section due to war impacts
# Scope: County
disrupt_trade_route_effect = {
	# Mark county as having a disrupted trade route
	if = {
		limit = {
			has_county_flag = on_silk_road
		}
		# Set disruption flag
		set_county_flag = on_disrupted_trade_route
		# Clear active route flag if present
		if = {
			limit = {
				has_county_flag = on_active_trade_route
			}
			remove_county_flag = on_active_trade_route
		}
		# Apply disruption modifier
		add_county_modifier = {
			modifier = trade_route_disrupted
			years = 2
		}
		# Reduce trade prosperity if present
		if = {
			limit = {
				has_modifier = high_trade_prosperity
			}
			remove_modifier = high_trade_prosperity
			add_county_modifier = {
				modifier = medium_trade_prosperity
				years = 1
			}
		}
		else_if = {
			limit = {
				has_modifier = medium_trade_prosperity
			}
			remove_modifier = medium_trade_prosperity
			add_county_modifier = {
				modifier = low_trade_prosperity
				years = 1
			}
		}
		else_if = {
			limit = {
				has_modifier = low_trade_prosperity
			}
			remove_modifier = low_trade_prosperity
		}
		# Notify holder of the disruption if this is a player
		holder = {
			if = {
				limit = {
					is_ai = no
				}
				send_interface_message = {
					type = county_event_bad
					title = trade_route_disruption_title
					desc = trade_route_disruption_desc
				}
			}
		}
		# Propagate disruption to connected counties
		# This creates a regional effect but limits the cascade
		every_neighboring_county = {
			limit = {
				has_county_flag = on_silk_road
				NOT = {
					has_county_flag = on_disrupted_trade_route
				}
			}
			random = {
				chance = 50				# 50% chance to propagate disruption
				disrupt_trade_route_effect = yes
			}
		}
	}
}
