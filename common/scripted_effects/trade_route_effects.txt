# Trade Route Effects
# These scripted effects handle trade route validation and travel plan compatibility
# Validates if two counties are properly connected for trade
validate_trade_route_connection_effect = {
	# $FROM_COUNTY$ = First county
	# $TO_COUNTY$ = Second county
	# First check if the route is already validated to avoid redundant calculations
	if = {
		limit = {
			$FROM_COUNTY$ = {
				has_variable = trade_route_to_$TO_COUNTY$_valid
			}
		}
		# Skip calculation if already validated
		return = yes
	}
	# Check if the counties are adjacent (using existing province connection system)
	if = {
		limit = {
			$FROM_COUNTY$ = {
				is_adjacent_to_county = $TO_COUNTY$
			}
		}
		# Counties are adjacent - connection is valid
		$FROM_COUNTY$ = {
			set_variable = {
				name = trade_route_to_$TO_COUNTY$_valid
				value = yes
			}
			set_variable = {
				name = trade_route_to_$TO_COUNTY$_connection_type
				value = "land"
			}
			set_county_flag = on_active_trade_route
		}
		$TO_COUNTY$ = {
			set_variable = {
				name = trade_route_to_$FROM_COUNTY$_valid
				value = yes
			}
			set_variable = {
				name = trade_route_to_$FROM_COUNTY$_connection_type
				value = "land"
			}
			set_county_flag = on_active_trade_route
		}
	}
	else = {
		# Counties are not directly adjacent - check for sea or river connections
		# Check sea connection using coastal counties
		if = {
			limit = {
				$FROM_COUNTY$ = {
					has_county_flag = coastal_county
				}
				$TO_COUNTY$ = {
					has_county_flag = coastal_county
				}
				# Check if counties are in the same or adjacent sea zones
				# This leverages the existing province connection system's sea zone data
				OR = {
					$FROM_COUNTY$ = {
						is_in_same_sea_zone_as = $TO_COUNTY$
					}
					$FROM_COUNTY$ = {
						is_in_adjacent_sea_zone_to = $TO_COUNTY$
					}
				}
			}
			# Counties are connected by sea - connection is valid
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_valid
					value = yes
				}
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_connection_type
					value = "sea"
				}
				set_county_flag = on_active_trade_route
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_valid
					value = yes
				}
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_connection_type
					value = "sea"
				}
				set_county_flag = on_active_trade_route
			}
		}
		# Check river connection
		else_if = {
			limit = {
				$FROM_COUNTY$ = {
					has_river = yes
				}
				$TO_COUNTY$ = {
					has_river = yes
				}
				# Check if counties share the same river
				# This leverages the existing river system data
				$FROM_COUNTY$ = {
					is_connected_by_river_to = $TO_COUNTY$
				}
			}
			# Counties are connected by river - connection is valid
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_valid
					value = yes
				}
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_connection_type
					value = "river"
				}
				set_county_flag = on_active_trade_route
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_valid
					value = yes
				}
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_connection_type
					value = "river"
				}
				set_county_flag = on_active_trade_route
			}
		}
		else = {
			# Counties are not connected - connection is invalid
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_valid
					value = no
				}
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_valid
					value = no
				}
			}
		}
	}
	# Apply appropriate modifiers based on connection type
	if = {
		limit = {
			$FROM_COUNTY$ = {
				has_variable = trade_route_to_$TO_COUNTY$_valid
				var:trade_route_to_$TO_COUNTY$_valid = yes
			}
		}
		# Apply efficiency modifiers based on connection type
		if = {
			limit = {
				$FROM_COUNTY$ = {
					var:trade_route_to_$TO_COUNTY$_connection_type = "land"
				}
			}
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_efficiency
					value = land_trade_route_modifier
				}
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_efficiency
					value = land_trade_route_modifier
				}
			}
		}
		else_if = {
			limit = {
				$FROM_COUNTY$ = {
					var:trade_route_to_$TO_COUNTY$_connection_type = "sea"
				}
			}
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_efficiency
					value = coastal_trade_route_modifier
				}
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_efficiency
					value = coastal_trade_route_modifier
				}
			}
		}
		else_if = {
			limit = {
				$FROM_COUNTY$ = {
					var:trade_route_to_$TO_COUNTY$_connection_type = "river"
				}
			}
			$FROM_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$TO_COUNTY$_efficiency
					value = river_trade_route_modifier
				}
			}
			$TO_COUNTY$ = {
				set_variable = {
					name = trade_route_to_$FROM_COUNTY$_efficiency
					value = river_trade_route_modifier
				}
			}
		}
	}
}

# Sets up travel plan compatibility for trade caravans
setup_trade_caravan_travel_plan_effect = {
	# $FROM_NODE$ = Starting trade node
	# $TO_NODE$ = Destination trade node
	# $CARAVAN_LEADER$ = Character leading the caravan (optional)
	# $TRADE_GOODS$ = Optional list of goods being transported
	# $CARAVAN_SIZE$ = Optional size of caravan (small, medium, large)
	# $RETURN_TRIP$ = Whether to create a return journey (default: yes)
	# Save source and destination nodes for reference
	$FROM_NODE$.county = {
		save_scope_as = from_county
	}
	$TO_NODE$.county = {
		save_scope_as = to_county
	}
	# Determine caravan size if not specified
	if = {
		limit = {
			NOT = {
				exists = $CARAVAN_SIZE$
			}
		}
		# Default to medium caravan
		save_temporary_scope_value_as = {
			name = temp_caravan_size
			value = "medium"
		}
	}
	else = {
		save_temporary_scope_value_as = {
			name = temp_caravan_size
			value = $CARAVAN_SIZE$
		}
	}
	# Determine if return trip is needed
	if = {
		limit = {
			NOT = {
				exists = $RETURN_TRIP$
			}
		}
		# Default to yes for return trip
		save_temporary_scope_value_as = {
			name = temp_return_trip
			value = yes
		}
	}
	else = {
		save_temporary_scope_value_as = {
			name = temp_return_trip
			value = $RETURN_TRIP$
		}
	}
	# Check if we need to identify trade goods
	if = {
		limit = {
			NOT = {
				exists = $TRADE_GOODS$
			}
		}
		# Auto-determine goods based on source county (to be expanded later with actual trade goods system)
		scope:from_county = {
			if = {
				limit = {
					OR = {
						terrain = desert_mountains
						terrain = steppe
					}
				}
				save_temporary_scope_value_as = {
					name = temp_trade_goods
					value = "silk"
				}
			}
			else_if = {
				limit = {
					OR = {
						terrain = jungle
						terrain = desert
					}
				}
				save_temporary_scope_value_as = {
					name = temp_trade_goods
					value = "spices"
				}
			}
			else = {
				save_temporary_scope_value_as = {
					name = temp_trade_goods
					value = "general_goods"
				}
			}
		}
	}
	else = {
		save_temporary_scope_value_as = {
			name = temp_trade_goods
			value = $TRADE_GOODS$
		}
	}
	# Determine if we have a caravan leader specified or need to generate one
	if = {
		limit = {
			exists = $CARAVAN_LEADER$
		}
		# Use the provided character as caravan leader
		$CARAVAN_LEADER$ = {
			save_scope_as = caravan_leader
		}
	}
	else = {
		# Generate a random merchant character to lead caravan
		$FROM_NODE$.county.holder = {
			create_character = {
				name = "RANDOM_TRADER_NAME"				# Using a placeholder name
				faith = this.faith
				culture = this.culture
				age = {
					min = 25
					max = 55
				}
				trait = gregarious
				traits = {
					diligent
					shrewd
				}
				employer = this
				save_scope_as = caravan_leader
			}
		}
	}
	# Now set up travel plan using existing travel system
	scope:caravan_leader = {
		# Set up variables to track caravan information
		set_variable = {
			name = caravan_origin_node
			value = $FROM_NODE$.id
		}
		set_variable = {
			name = caravan_destination_node
			value = $TO_NODE$.id
		}
		set_variable = {
			name = caravan_goods
			value = scope:temp_trade_goods
		}
		set_variable = {
			name = caravan_size
			value = scope:temp_caravan_size
		}
		# Create special caravan travel plan using base game travel system
		start_travel_plan = {
			origin = scope:from_county.barony			# Start at source county's main barony
			destination = scope:to_county.barony			# End at destination county's main barony
			# Use travel system on_action hooks
			on_start_on_action = on_trade_caravan_departure
			on_arrival_on_action = on_trade_caravan_arrival
			# Integrate with standard travel events where appropriate
			include_in_travel_events = {
				types = {
					travel_events
					trade_travel_events
				}
			}
			# Set appropriate travel plan properties
			return_trip = scope:temp_return_trip
			# Use existing travel speed modifiers based on connection type
			travel_speed_modifier = {
				if = {
					limit = {
						scope:from_county = {
							var:trade_route_to_[Scope.to_county.GetID]_connection_type = "sea"
						}
					}
					# Sea travel is faster
					add = 0.25
				}
				else_if = {
					limit = {
						scope:from_county = {
							var:trade_route_to_[Scope.to_county.GetID]_connection_type = "river"
						}
					}
					# River travel is slightly faster
					add = 0.15
				}
				else = {
					# Land travel can be affected by terrain
					if = {
						limit = {
							OR = {
								scope:from_county = {
									terrain = mountains
								}
								scope:to_county = {
									terrain = mountains
								}
							}
						}
						# Mountains slow travel
						add = -0.2
					}
					else_if = {
						limit = {
							OR = {
								scope:from_county = {
									terrain = desert
								}
								scope:to_county = {
									terrain = desert
								}
							}
						}
						# Desert slows travel
						add = -0.15
					}
				}
				# Caravan size affects speed
				if = {
					limit = {
						var:caravan_size = "large"
					}
					# Large caravans move slower
					add = -0.1
				}
				else_if = {
					limit = {
						var:caravan_size = "small"
					}
					# Small caravans move faster
					add = 0.1
				}
			}
			# Travel modifiers for caravan based on route type and goods
			travel_safety_modifier = {
				# Base modifier
				value = 0
				# Route type affects safety
				if = {
					limit = {
						scope:from_county = {
							var:trade_route_to_[Scope.to_county.GetID]_connection_type = "sea"
						}
					}
					# Sea travel is less safe
					add = -0.15
				}
				# Valuable goods are less safe to transport
				if = {
					limit = {
						OR = {
							var:caravan_goods = "silk"
							var:caravan_goods = "spices"
							var:caravan_goods = "jewels"
						}
					}
					add = -0.1
				}
				# Large caravans are safer
				if = {
					limit = {
						var:caravan_size = "large"
					}
					add = 0.15
				}
				else_if = {
					limit = {
						var:caravan_size = "small"
					}
					add = -0.1
				}
			}
		}
	}
	# Set up caravan arrival on_action with potential rewards
	scope:caravan_leader = {
		set_variable = {
			name = caravan_value
			value = 10			# Base value
		}
		# Modify value based on goods
		if = {
			limit = {
				var:caravan_goods = "silk"
			}
			change_variable = {
				name = caravan_value
				add = 15
			}
		}
		else_if = {
			limit = {
				var:caravan_goods = "spices"
			}
			change_variable = {
				name = caravan_value
				add = 12
			}
		}
		# Modify value based on caravan size
		if = {
			limit = {
				var:caravan_size = "large"
			}
			change_variable = {
				name = caravan_value
				multiply = 1.5
			}
		}
		else_if = {
			limit = {
				var:caravan_size = "small"
			}
			change_variable = {
				name = caravan_value
				multiply = 0.6
			}
		}
	}
}

# Calculates trade prosperity based on county development
calculate_trade_prosperity_effect = {
	# $COUNTY$ = County to calculate prosperity for
	# Trade prosperity is based on development level and trade route status
	$COUNTY$ = {
		# Base value from development
		set_variable = {
			name = trade_prosperity_level
			value = development_level
		}
		# Bonus if on active trade route
		if = {
			limit = {
				has_county_flag = on_active_trade_route
			}
			change_variable = {
				name = trade_prosperity_level
				add = 2
			}
		}
		# Penalty if trade route is disrupted
		if = {
			limit = {
				has_county_flag = on_disrupted_trade_route
			}
			change_variable = {
				name = trade_prosperity_level
				subtract = 1
			}
		}
		# Ensure prosperity level doesn't go negative
		if = {
			limit = {
				var:trade_prosperity_level < 0
			}
			set_variable = {
				name = trade_prosperity_level
				value = 0
			}
		}
	}
}

# Update trade node controller based on county owner
update_trade_node_controller_effect = {
	# $NODE_ID$ = ID of the trade node to update
	# Find the trade node's county and update controller
	every_county = {
		limit = {
			$NODE_ID$ = {
				county = this
			}
		}
		# Set the controller to the county holder
		$NODE_ID$ = {
			set_variable = {
				name = controller
				value = root.holder
			}
		}
	}
}

# Sets up connections between trade nodes based on county adjacency
setup_trade_node_connections_effect = {
	# Create connections between trade nodes based on county adjacency
	# This is run once at game start and when new trade nodes are established
	# Get all trade nodes
	every_in_list = {
		list = global_trade_nodes_list
		save_scope_as = current_node
		# For each node, check other nodes for potential connections
		every_in_list = {
			list = global_trade_nodes_list
			limit = {
				NOT = {
					this = scope:current_node
				}
				# Skip self-connections
			}
			save_scope_as = target_node
			# Check if the counties are connected
			scope:current_node.county = {
				save_scope_as = from_county
			}
			scope:target_node.county = {
				save_scope_as = to_county
			}
			# Use the existing validation effect to check and establish connection
			validate_trade_route_connection_effect = {
				FROM_COUNTY = scope:from_county
				TO_COUNTY = scope:to_county
			}
			# If connection is valid, add connection to the trade node list
			if = {
				limit = {
					scope:from_county = {
						has_variable = trade_route_to_scope:to_county_valid
						var:trade_route_to_scope:to_county_valid = yes
					}
				}
				# Record connection type in trade node variables
				scope:current_node = {
					set_variable = {
						name = connected_to_node_$target_node$
						value = yes
					}
					# Store connection type (land, sea, river)
					if = {
						limit = {
							scope:from_county = {
								var:trade_route_to_scope:to_county_connection_type = "land"
							}
						}
						set_variable = {
							name = connection_type_to_$target_node$
							value = "land"
						}
					}
					else_if = {
						limit = {
							scope:from_county = {
								var:trade_route_to_scope:to_county_connection_type = "sea"
							}
						}
						set_variable = {
							name = connection_type_to_$target_node$
							value = "sea"
						}
					}
					else_if = {
						limit = {
							scope:from_county = {
								var:trade_route_to_scope:to_county_connection_type = "river"
							}
						}
						set_variable = {
							name = connection_type_to_$target_node$
							value = "river"
						}
					}
					# Store connection efficiency
					set_variable = {
						name = connection_efficiency_to_$target_node$
						value = scope:from_county.var:trade_route_to_scope:to_county_efficiency
					}
				}
				# Log connection for debugging
				log = "[Trade System] Connected trade node [scope:current_node.GetID] to [scope:target_node.GetID] via [scope:from_county.var:trade_route_to_scope:to_county_connection_type]"
			}
		}
		# Ensure node doesn't exceed maximum connections
		if = {
			limit = {
				# Count variables with connected_to_node prefix
				count_variables = {
					name = connected_to_node_
					count > max_trade_node_connections
				}
			}
			# Remove excess connections, prioritizing keeping the most efficient ones
			ordered_variable = {
				name = connection_efficiency_to_
				order_by = value
				count = max_trade_node_connections
				# Keep only the top max_trade_node_connections connections
				# Prune the rest by removing their variables
				min_value = 0
				max_to_remove = 100				# Safe upper limit
				every_removed = {
					scope:current_node = {
						remove_variable = connected_to_node_$PREV$
						remove_variable = connection_type_to_$PREV$
						remove_variable = connection_efficiency_to_$PREV$
					}
					log = "[Trade System] Removed excess connection from [scope:current_node.GetID] to [$PREV$.GetID]"
				}
			}
		}
	}
}
